1. 'number' + 3 + 3
number33 объединение значения в строки

2. null + 3
значение будет 3. при использовании нулл и число, нулл будет означать как 0, то есть 0+3=3

3. 5 && "qwerty"
ответ будет "qwerty". если оба операнта истины, то возвращаться будет последн.истина

4. +'40' + +'2' + "hillel";
ответом будет '42hillel'.в строке плюсуется 40+2 и объединяется со словом hillel, унарный оператор +

5. '10' - 5 === 6;
=== используется для равенства, сравнивает значения и проверяет их типы данных, если типы разные , то вернет ответ false, если типы совпадают, то тру. В нашем примере ответ будет false

6. true + false
буллинная функция то есть, тру как 1, фалс как 0, один плюс ноль, ответом будет 1

7. '4px' - 3
если вычнсть число из строки, которая начинается с числового значения, то строка автоматом преобраз.в число. ответом будет 1.

8. '4' - 3
тут все просто, строка из двух чисел, которые мы вычитаем и ответ будет 1

9. '6' + 3 ** 0;
оператор экспоненциации, 3 в 0 степени будет 0, но так как такого в математике ответа нет, то 0 будем равно как 1, а при объединении строки, будет 61 ответом

10. 12 / '6'
тут будет деление, ответ 2

11. '10' + (5 === 6);
при объединении строки с логическим значением, лог. значение преобразуется в строку, ответ "10false"

12. null == ''
== оператор сравнения, сравнивает два значения, он не может быть равен пустой строке, отвеом будет 'false'

13. 3 ** (9 / 3);
ответом будет 27.звездочки означают возведение в степень, то есть 3*3*3 равно 27

14. !!'false' == !!'true'
ответом будет true, !! используется для преобразов. строки 'true' в ее булевый эквивалент, тк непустая строка явл. истинным знач-м

15. 0 || '0' && 1
оператор && имеет более высокий приоритет, чем оператор ||. '0' && 1 тут будет 1, так как возвращается второй оперант, 0 || числится как 1, так как этот оператор возвр-т первый истинный операнд
ответом будет один один.

16. (+null == false) < 1;
сначала +null преобразутся в 0, а потом сравнивается с фалс, который тоже равен 0, ответом будет, что 0 меньше 1.

17. false && true || true
вычисляется слева направо, первое значение числится как false, && этот операнд возвращает первый ложный операнд, затем фалс || тру, будет тру, такак этот оператор возвращает первый истинный операнд.
Ответом будет true.

18. false && (false || true);
как и в предыдущем примере операндов, false || true будет true, затем false && true, числится как false, таким образом ответ будет false.

19. (+null == false) < 1 ** 5;
null будет равен 0, поскольку оператор преобразовывает его в 0, 0==false, является тру, так как ложь на ложь дает тру,
 1 ** 5; будет 1, оператор степени. Ответом будет, тру < 1 равен тру.